package extractor

import (
	"encoding/json"
	"fmt"
	"interview-bot-complete/internal/api"
	"interview-bot-complete/internal/interview"
	"interview-bot-complete/internal/prompts"
	"interview-bot-complete/internal/schema"
	"interview-bot-complete/internal/storage"
	"interview-bot-complete/internal/validator"
	"io/ioutil"
	"log"
	"os"
)

// Service –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
type Service struct {
	apiClient    *api.OpenAIClient
	schemaFields map[string]schema.SchemaField
}

// ProfileResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
type ProfileResult struct {
	ProfileJSON string                 `json:"profile_json"`
	Metadata    map[string]interface{} `json:"metadata"`
	Success     bool                   `json:"success"`
	Error       string                 `json:"error,omitempty"`
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
func New(openaiAPIKey string) (*Service, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
	client := api.NewOpenAIClient(openaiAPIKey)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –∏–∑ config/dictionary.yaml
	yamlContent, err := ioutil.ReadFile("config/dictionary.yaml")
	if err != nil {
		return nil, fmt.Errorf("error reading config/dictionary.yaml: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º —Å—Ö–µ–º—É
	schemaFields, err := schema.ParseYAMLSchema(yamlContent)
	if err != nil {
		return nil, fmt.Errorf("error parsing schema: %w", err)
	}

	log.Printf("Profile Extractor: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ö–µ–º–∞ —Å %d –ø–æ–ª—è–º–∏", len(schemaFields))

	return &Service{
		apiClient:    client,
		schemaFields: schemaFields,
	}, nil
}

// ExtractProfile –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
func (s *Service) ExtractProfile(interviewResult *storage.InterviewResult) (*ProfileResult, error) {
	log.Printf("–ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é: %s", interviewResult.InterviewID)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InterviewResult –≤ —Ñ–æ—Ä–º–∞—Ç Profile Extractor
	extractorInterview := s.convertToExtractorFormat(interviewResult)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
	userText := extractorInterview.ExtractContextualAnswers()
	log.Printf("–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(userText))

	// –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	log.Println("–≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...")
	extractionPrompt := prompts.GenerateExtractionPrompt(s.schemaFields, userText)

	profileJSON, err := s.apiClient.ExtractProfile(extractionPrompt)
	if err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v", err),
		}, err
	}

	// –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
	log.Println("–≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...")
	validationPrompt := prompts.GenerateValidationPrompt(profileJSON)

	validatedJSON, err := s.apiClient.ExtractProfile(validationPrompt)
	if err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: %v", err),
		}, err
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	if err := validator.ValidateProfileJSON(validatedJSON, s.schemaFields); err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v", err)
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	var formatted map[string]interface{}
	if err := json.Unmarshal([]byte(validatedJSON), &formatted); err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON: %v", err),
		}, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
	metadata := extractorInterview.GetInterviewMetadata()
	formatted["_metadata"] = map[string]interface{}{
		"source_interview": metadata,
		"processing_info": map[string]interface{}{
			"schema_version":    "1.0",
			"extraction_method": "contextual_answers",
			"text_length":       len(userText),
			"extraction_source": "telegram_bot",
		},
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON —Å—Ç—Ä–æ–∫—É
	finalJSON, err := json.MarshalIndent(formatted, "", "  ")
	if err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON: %v", err),
		}, err
	}

	log.Printf("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é: %s", interviewResult.InterviewID)

	return &ProfileResult{
		ProfileJSON: string(finalJSON),
		Metadata:    metadata,
		Success:     true,
	}, nil
}

// SaveProfile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–∞–π–ª
func (s *Service) SaveProfile(interviewID string, profileResult *ProfileResult) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("output", 0755); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ output: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å ID –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("output/profile_%s.json", interviewID)
	err := ioutil.WriteFile(fileName, []byte(profileResult.ProfileJSON), 0644)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %w", err)
	}

	log.Printf("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s", fileName)
	return fileName, nil
}

// convertToExtractorFormat –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç InterviewResult –≤ —Ñ–æ—Ä–º–∞—Ç Profile Extractor
func (s *Service) convertToExtractorFormat(result *storage.InterviewResult) *interview.Interview {
	var blocks []interview.Block

	for _, block := range result.Blocks {
		var qas []interview.QuestionAndAnswer

		for _, qa := range block.QuestionsAndAnswers {
			qas = append(qas, interview.QuestionAndAnswer{
				Question: qa.Question,
				Answer:   qa.Answer,
			})
		}

		blocks = append(blocks, interview.Block{
			BlockID:             block.BlockID,
			BlockName:           block.BlockName,
			QuestionsAndAnswers: qas,
		})
	}

	return &interview.Interview{
		InterviewID: result.InterviewID,
		Timestamp:   result.Timestamp,
		Blocks:      blocks,
	}
}

// GetProfileSummary —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
func (s *Service) GetProfileSummary(profileJSON string) (string, error) {
	var profile map[string]interface{}
	if err := json.Unmarshal([]byte(profileJSON), &profile); err != nil {
		return "", err
	}

	summary := "üìä **–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è:**\n\n"

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	if values, ok := profile["values"].(map[string]interface{}); ok {
		if coreBeliefs, ok := values["core_beliefs"].([]interface{}); ok && len(coreBeliefs) > 0 {
			summary += "üéØ **–¶–µ–Ω–Ω–æ—Å—Ç–∏:** "
			for i, belief := range coreBeliefs {
				if i > 0 {
					summary += ", "
				}
				summary += fmt.Sprintf("%v", belief)
			}
			summary += "\n\n"
		}
	}

	if personality, ok := profile["personality"].(map[string]interface{}); ok {
		if strengths, ok := personality["strengths"].([]interface{}); ok && len(strengths) > 0 {
			summary += "üí™ **–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:** "
			for i, strength := range strengths {
				if i > 0 {
					summary += ", "
				}
				summary += fmt.Sprintf("%v", strength)
			}
			summary += "\n\n"
		}
	}

	if career, ok := profile["career"].(map[string]interface{}); ok {
		if workValues, ok := career["work_values"].([]interface{}); ok && len(workValues) > 0 {
			summary += "üè¢ **–†–∞–±–æ—á–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏:** "
			for i, value := range workValues {
				if i > 0 {
					summary += ", "
				}
				summary += fmt.Sprintf("%v", value)
			}
			summary += "\n\n"
		}
	}

	if future, ok := profile["future"].(map[string]interface{}); ok {
		if aspirations, ok := future["career_aspirations"].([]interface{}); ok && len(aspirations) > 0 {
			summary += "üöÄ **–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏:** "
			for i, aspiration := range aspirations[:min(3, len(aspirations))] { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
				if i > 0 {
					summary += ", "
				}
				if aspMap, ok := aspiration.(map[string]interface{}); ok {
					summary += fmt.Sprintf("%v", aspMap["goal"])
				}
			}
			summary += "\n\n"
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	if metadata, ok := profile["_metadata"].(map[string]interface{}); ok {
		if sourceInterview, ok := metadata["source_interview"].(map[string]interface{}); ok {
			if completionRate, ok := sourceInterview["completion_rate"].(float64); ok {
				summary += fmt.Sprintf("üìà **–ü–æ–ª–Ω–æ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:** %.1f%%\n", completionRate)
			}
		}
	}

	summary += "\n_–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é._"

	return summary, nil
}

// min helper function
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

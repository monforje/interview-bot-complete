package extractor

import (
	"encoding/json"
	"fmt"
)

// ProfileMatch ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
type ProfileMatch struct {
	MatchID string `json:"profile_match.id"`
	Name    string `json:"profile_match.name"`
	Summary string `json:"profile_match.summary"`
}

// ParseProfileMatch ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ json
func ParseProfileMatch(jsonData []byte) (*ProfileMatch, error) {
	var profile ProfileMatch
	if err := json.Unmarshal(jsonData, &profile); err != nil {
		return nil, err
	}
	return &profile, nil
}

// GenerateProfileDescription ‚Äî —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func GenerateProfileDescription(profile *ProfileMatch) string {
	return fmt.Sprintf(
		"üßë‚Äçüíº *–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî %s* (%s)\n\n%s",
		profile.Name,
		profile.MatchID,
		profile.Summary,
	)
}

package telegram

import (
	"fmt"
	"interview-bot-complete/internal/config"
	"interview-bot-complete/internal/extractor"
	"interview-bot-complete/internal/interviewer"
	"interview-bot-complete/internal/storage"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/google/uuid"
)

type RateLimiter struct {
	requests map[int64][]time.Time
	mutex    sync.RWMutex
	limit    int
	window   time.Duration
}

func NewRateLimiter(limit int, window time.Duration) *RateLimiter {
	return &RateLimiter{
		requests: make(map[int64][]time.Time),
		limit:    limit,
		window:   window,
	}
}

func (rl *RateLimiter) IsAllowed(userID int64) bool {
	rl.mutex.Lock()
	defer rl.mutex.Unlock()

	now := time.Now()

	if requests, exists := rl.requests[userID]; exists {
		var valid []time.Time
		for _, t := range requests {
			if now.Sub(t) < rl.window {
				valid = append(valid, t)
			}
		}
		rl.requests[userID] = valid
	}

	if len(rl.requests[userID]) >= rl.limit {
		return false
	}

	rl.requests[userID] = append(rl.requests[userID], now)
	return true
}

type Handler struct {
	bot           *Bot
	config        *config.Config
	interviewer   *interviewer.Service
	extractor     *extractor.Service
	sessions      map[int64]*UserSession
	sessionsMutex sync.RWMutex
	rateLimiter   *RateLimiter
}

func NewHandler(bot *Bot, cfg *config.Config, interviewerService *interviewer.Service, extractorService *extractor.Service) *Handler {
	h := &Handler{
		bot:         bot,
		config:      cfg,
		interviewer: interviewerService,
		extractor:   extractorService,
		sessions:    make(map[int64]*UserSession),
		rateLimiter: NewRateLimiter(10, time.Minute),
	}
	h.startSessionCleanup()
	return h
}

func (h *Handler) startSessionCleanup() {
	ticker := time.NewTicker(1 * time.Hour)
	go func() {
		for range ticker.C {
			h.cleanupInactiveSessions()
		}
	}()
}

func (h *Handler) cleanupInactiveSessions() {
	h.sessionsMutex.Lock()
	defer h.sessionsMutex.Unlock()

	cutoff := time.Now().Add(-24 * time.Hour)
	for uid, sess := range h.sessions {
		if sess.LastActivity.Before(cutoff) {
			delete(h.sessions, uid)
		}
	}
}

func (h *Handler) HandleUpdate(update Update) {
	if update.Message == nil || update.Message.From == nil {
		return
	}
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID
	text := strings.TrimSpace(update.Message.Text)

	if !h.rateLimiter.IsAllowed(userID) {
		h.bot.SendMessage(chatID, "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
		return
	}

	session := h.getOrCreateSession(userID)

	if strings.HasPrefix(text, "/") {
		h.handleCommand(chatID, text, session)
		return
	}
	h.handleUserInput(chatID, text, session)
}

func (h *Handler) completeInterview(chatID int64, session *UserSession) {
	if err := storage.SaveResult(session.Result); err != nil {
		h.bot.SendMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é.")
		return
	}
	session.State = StateCompleted

	h.bot.SendMessage(chatID, "üéâ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
	if h.extractor != nil {
		go h.processProfileExtraction(chatID, session)
	}

	completionText := fmt.Sprintf(`‚úÖ *–ò–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*
üìä –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ %d –±–ª–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ
‚Ä¢ %d –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ
‚Ä¢ üÜî ID: `+"`%s`"+`

üß† –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é.`,
		len(session.Result.Blocks),
		h.getTotalAnswersCount(session.Result),
		session.InterviewID,
	)
	h.bot.SendMessage(chatID, completionText)
}

func (h *Handler) processProfileExtraction(chatID int64, session *UserSession) {
	profileResult, err := h.extractor.ExtractProfile(session.Result)
	if err != nil {
		h.bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: "+err.Error())
		return
	}
	if !profileResult.Success {
		h.bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: "+profileResult.Error)
		return
	}

	fileName, err := h.extractor.SaveProfile(session.InterviewID, profileResult)
	if err != nil {
		h.bot.SendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: "+err.Error())
	}

	// **–ù–æ–≤—ã–π –±–ª–æ–∫**: –≤—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ Marvel-–≥–µ—Ä–æ—è
	if rawJSON, ok := h.extractor.GetLastProfileJSON(session.InterviewID); ok {
		if prof, err := extractor.ParseProfileMatch([]byte(rawJSON)); err == nil {
			h.bot.SendMessage(chatID, extractor.GenerateProfileDescription(prof))
		}
	}

	// –î–∞–ª—å—à–µ ‚Äî —É–∂–µ –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ
	summary, err := h.extractor.GetProfileSummary(profileResult.ProfileJSON)
	if err != nil {
		summary = "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ."
	}
	resultMessage := fmt.Sprintf(`üéØ *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω!*

%s

üíæ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: `+"`%s`"+`

üîç –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
‚Ä¢ –°–µ–º–µ–π–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –≤–ª–∏—è–Ω–∏—è
‚Ä¢ –¶–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏  
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –°–ø–æ—Å–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ

_–≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤._`,
		summary, fileName,
	)
	h.bot.SendMessage(chatID, resultMessage)

	h.sendJSONProfile(chatID, profileResult.ProfileJSON, session.InterviewID)

	if rawJSON, ok := h.extractor.GetLastProfileJSON(session.InterviewID); ok {
		hero, err := h.extractor.InferProfileMatch(rawJSON)
		if err == nil {
			msg := extractor.GenerateProfileDescription(hero)
			h.bot.SendMessage(chatID, msg)
		} else {
			h.bot.SendMessage(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–ø–µ—Ä–≥–µ—Ä–æ—è: "+err.Error())
		}
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (h *Handler) handleCommand(chatID int64, command string, session *UserSession) {
	switch command {
	case "/start":
		h.handleStartCommand(chatID, session)
	case "/help":
		h.handleHelpCommand(chatID)
	case "/status":
		h.handleStatusCommand(chatID, session)
	case "/restart":
		h.handleRestartCommand(chatID, session)
	case "/stop":
		h.handleStopCommand(chatID, session)
	case "/getprofile":
		h.handleGetProfileCommand(chatID, session)
	case "/getsummary":
		h.handleGetSummaryCommand(chatID, session)
	default:
		h.bot.SendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *Handler) handleStartCommand(chatID int64, session *UserSession) {
	if session.State == StateInterview || session.State == StateWaitingAnswer {
		h.bot.SendMessage(chatID, "–£ –≤–∞—Å —É–∂–µ –∏–¥–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ /restart –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é.")
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
	h.initializeInterview(chatID, session)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *Handler) handleHelpCommand(chatID int64) {
	helpText := `ü§ñ *–ë–æ—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
/getprofile - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π JSON –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
/getsummary - –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ
3. –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ %d –±–ª–æ–∫–æ–≤
4. –í –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ –¥–æ %d –≤–æ–ø—Ä–æ—Å–æ–≤
5. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å

*üß† –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–µ–º–µ–π–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ –°–ø–æ—Å–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π

*üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:*
‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getprofile –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è JSON
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getsummary –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ

*–°–æ–≤–µ—Ç:* –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑!`

	maxQuestions := h.config.GetQuestionsPerBlock() + h.config.GetMaxFollowupQuestions()
	h.bot.SendFormattedMessage(chatID, helpText, h.config.GetTotalBlocks(), maxQuestions)
}

// handleStatusCommand –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é
func (h *Handler) handleStatusCommand(chatID int64, session *UserSession) {
	switch session.State {
	case StateIdle:
		h.bot.SendMessage(chatID, "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞—á–∞—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
	case StateInterview, StateWaitingAnswer:
		progress := fmt.Sprintf("üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é*\n\n"+
			"üÜî ID: `%s`\n"+
			"üìã –ë–ª–æ–∫: %d/%d (%s)\n"+
			"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ: %d\n"+
			"‚è∞ –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s",
			session.InterviewID,
			session.CurrentBlock, h.config.GetTotalBlocks(),
			h.getCurrentBlockTitle(session.CurrentBlock),
			session.QuestionCount,
			h.getStateDescription(session.State))
		h.bot.SendMessage(chatID, progress)
	case StateCompleted:
		h.bot.SendFormattedMessage(chatID, "‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüÜî ID: `%s`\n\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getprofile –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON –ø—Ä–æ—Ñ–∏–ª—è_", session.InterviewID)
	}
}

// handleRestartCommand –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
func (h *Handler) handleRestartCommand(chatID int64, session *UserSession) {
	h.resetSession(session)
	h.bot.SendMessage(chatID, "üîÑ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–±—Ä–æ—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é.")
}

// handleStopCommand –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
func (h *Handler) handleStopCommand(chatID int64, session *UserSession) {
	if session.State == StateIdle {
		h.bot.SendMessage(chatID, "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
		return
	}

	h.resetSession(session)
	h.bot.SendMessage(chatID, "üõë –ò–Ω—Ç–µ—Ä–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
}

// handleGetProfileCommand –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ
func (h *Handler) handleGetProfileCommand(chatID int64, session *UserSession) {
	if session.State != StateCompleted || session.InterviewID == "" {
		h.bot.SendMessage(chatID, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é.")
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("output/profile_%s.json", session.InterviewID)
	profileData, err := os.ReadFile(fileName)
	if err != nil {
		h.bot.SendMessage(chatID, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω.")
		return
	}

	h.bot.SendMessage(chatID, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à JSON –ø—Ä–æ—Ñ–∏–ª—å...")
	h.sendJSONProfile(chatID, string(profileData), session.InterviewID)
}

// handleGetSummaryCommand –ø–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ
func (h *Handler) handleGetSummaryCommand(chatID int64, session *UserSession) {
	if session.State != StateCompleted || session.InterviewID == "" {
		h.bot.SendMessage(chatID, "‚ùå –†–µ–∑—é–º–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é.")
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("output/profile_%s.json", session.InterviewID)
	profileData, err := os.ReadFile(fileName)
	if err != nil {
		h.bot.SendMessage(chatID, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
	if h.extractor != nil {
		summary, err := h.extractor.GetProfileSummary(string(profileData))
		if err != nil {
			h.bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ: "+err.Error())
			return
		}

		resultMessage := fmt.Sprintf(`üéØ *–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è:*

%s

üíæ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: `+"`%s`"+`

_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getprofile –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ JSON –ø—Ä–æ—Ñ–∏–ª—è_`, summary, fileName)

		h.bot.SendMessage(chatID, resultMessage)
	} else {
		h.bot.SendMessage(chatID, "‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
	}
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
func (h *Handler) validateUserInput(text string) error {
	if len(text) > 4000 {
		return fmt.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º/–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
	if len(text) > 10 && strings.Count(text, text[:1]) > len(text)*8/10 {
		return fmt.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤")
	}

	return nil
}

// handleUserInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *Handler) handleUserInput(chatID int64, text string, session *UserSession) {
	if session.State != StateWaitingAnswer {
		h.bot.SendMessage(chatID, "–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏.")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
	if err := h.validateUserInput(text); err != nil {
		h.bot.SendMessage(chatID, "‚ùå "+err.Error())
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
	session.LastActivity = time.Now()

	h.processUserAnswer(chatID, text, session)
}

// initializeInterview –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
func (h *Handler) initializeInterview(chatID int64, session *UserSession) {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
	h.resetSession(session)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
	session.InterviewID = uuid.New().String()
	session.State = StateInterview
	session.CurrentBlock = 1
	session.QuestionCount = 0
	session.LastActivity = time.Now()
	session.Result = &storage.InterviewResult{
		InterviewID: session.InterviewID,
		Timestamp:   time.Now().Format(time.RFC3339),
		Blocks:      make([]storage.BlockResult, 0, h.config.GetTotalBlocks()),
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	welcomeText := fmt.Sprintf(`üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–≤—å—é!*

üÜî *ID –∏–Ω—Ç–µ—Ä–≤—å—é:* `+"`%s`"+`
üìã *–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤:* %d
‚ùì *–í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ:* –¥–æ %d
‚è± *–í—Ä–µ–º—è:* ~%d –º–∏–Ω—É—Ç

*–ü—Ä–∞–≤–∏–ª–∞:*
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –ú–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –±–ª–æ–∫! üöÄ`,
		session.InterviewID,
		h.config.GetTotalBlocks(),
		h.config.GetQuestionsPerBlock()+h.config.GetMaxFollowupQuestions(),
		h.config.GetTotalBlocks()*3)

	h.bot.SendMessage(chatID, welcomeText)

	// –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
	h.startNextBlock(chatID, session)
}

// processUserAnswer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *Handler) processUserAnswer(chatID int64, answer string, session *UserSession) {
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å)
	if len(session.CurrentDialogue) > 0 {
		lastIndex := len(session.CurrentDialogue) - 1
		session.CurrentDialogue[lastIndex].Answer = answer
	}

	session.QuestionCount++
	maxQuestions := h.config.GetQuestionsPerBlock() + h.config.GetMaxFollowupQuestions()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –±–ª–æ–∫–µ
	if session.QuestionCount < maxQuestions {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
		h.generateNextQuestion(chatID, session)
	} else {
		// –ó–∞–≤–µ—Ä—à–∞–µ–º –±–ª–æ–∫
		h.finishCurrentBlock(chatID, session)
	}
}

// generateNextQuestion –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
func (h *Handler) generateNextQuestion(chatID int64, session *UserSession) {
	block := h.config.Blocks[session.CurrentBlock-1]

	if session.QuestionCount >= len(block.Questions) {
		h.finishCurrentBlock(chatID, session)
		return
	}

	question := block.Questions[session.QuestionCount]

	// –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∏–∞–ª–æ–≥
	session.CurrentDialogue = append(session.CurrentDialogue, storage.QA{
		Question: question,
		Answer:   "", // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
	})

	session.State = StateWaitingAnswer
	h.bot.SendFormattedMessage(chatID, "‚ùì *–í–æ–ø—Ä–æ—Å %d:*\n\n%s", session.QuestionCount+1, question)
}

// startNextBlock –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
func (h *Handler) startNextBlock(chatID int64, session *UserSession) {
	if session.CurrentBlock > h.config.GetTotalBlocks() {
		h.completeInterview(chatID, session)
		return
	}

	block := h.config.Blocks[session.CurrentBlock-1]
	session.QuestionCount = 0
	session.CurrentDialogue = []storage.QA{}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
	blockInfo := fmt.Sprintf("üìã *–ë–ª–æ–∫ %d/%d: %s*\n\n–°–µ–π—á–∞—Å –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ %s",
		session.CurrentBlock, h.config.GetTotalBlocks(), block.Title, strings.ToLower(block.Title))

	h.bot.SendMessage(chatID, blockInfo)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–ª–æ–∫–∞
	h.generateNextQuestion(chatID, session)
}

// finishCurrentBlock –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
func (h *Handler) finishCurrentBlock(chatID int64, session *UserSession) {
	h.bot.SendMessage(chatID, "üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–ª–æ–∫...")

	block := h.config.Blocks[session.CurrentBlock-1]

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–æ–∫–∞
	blockResult := &storage.BlockResult{
		BlockID:             block.ID,
		BlockName:           block.Name,
		QuestionsAndAnswers: session.CurrentDialogue,
	}

	// –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
	summary, err := h.interviewer.CreateSummary(session.CurrentDialogue, h.config)
	if err != nil {
		h.bot.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏ –±–ª–æ–∫–∞.")
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–∞–º–º–∞—Ä–∏
	session.Result.Blocks = append(session.Result.Blocks, *blockResult)
	session.CumulativeSummaries = append(session.CumulativeSummaries, summary)

	// –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–ª–æ–∫–∞
	h.bot.SendFormattedMessage(chatID, "‚úÖ –ë–ª–æ–∫ %d –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...", session.CurrentBlock)

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
	session.CurrentBlock++
	h.startNextBlock(chatID, session)
}

// sendJSONProfile –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –ø—Ä–æ—Ñ–∏–ª—å
func (h *Handler) sendJSONProfile(chatID int64, profileJSON string, interviewID string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä JSON
	if len(profileJSON) > 4096 {
		// –ï—Å–ª–∏ JSON —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
		h.sendLargeJSONProfile(chatID, profileJSON, interviewID)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –≤ code block –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	jsonMessage := fmt.Sprintf("üìÑ *–ü–æ–ª–Ω—ã–π JSON –ø—Ä–æ—Ñ–∏–ª—å:*\n\n```json\n%s\n```", profileJSON)

	err := h.bot.SendMessage(chatID, jsonMessage)
	if err != nil {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å
		h.sendLargeJSONProfile(chatID, profileJSON, interviewID)
	}
}

// sendLargeJSONProfile –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–∏–µ JSON –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —á–∞—Å—Ç—è–º
func (h *Handler) sendLargeJSONProfile(chatID int64, profileJSON string, interviewID string) {
	h.bot.SendMessage(chatID, "üìÑ *–ü–æ–ª–Ω—ã–π JSON –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏):*")

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ–∫–æ–ª–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
	// –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	maxChunkSize := 3500

	jsonBytes := []byte(profileJSON)
	totalChunks := (len(jsonBytes) + maxChunkSize - 1) / maxChunkSize

	for i := 0; i < totalChunks; i++ {
		start := i * maxChunkSize
		end := start + maxChunkSize
		if end > len(jsonBytes) {
			end = len(jsonBytes)
		}

		chunk := string(jsonBytes[start:end])

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
		chunkMessage := fmt.Sprintf("üìÑ *–ß–∞—Å—Ç—å %d/%d:*\n\n```json\n%s\n```",
			i+1, totalChunks, chunk)

		err := h.bot.SendMessage(chatID, chunkMessage)
		if err != nil {
			h.bot.SendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ %d –ø—Ä–æ—Ñ–∏–ª—è: %v", i+1, err))
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
		time.Sleep(500 * time.Millisecond)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
	h.bot.SendMessage(chatID, fmt.Sprintf("‚úÖ JSON –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n\nüíæ –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ: `%s`",
		fmt.Sprintf("output/profile_%s.json", interviewID)))
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
func (h *Handler) getOrCreateSession(userID int64) *UserSession {
	h.sessionsMutex.Lock()
	defer h.sessionsMutex.Unlock()

	if session, exists := h.sessions[userID]; exists {
		return session
	}

	session := &UserSession{
		UserID:       userID,
		State:        StateIdle,
		LastActivity: time.Now(),
	}
	h.sessions[userID] = session
	return session
}

func (h *Handler) resetSession(session *UserSession) {
	session.State = StateIdle
	session.CurrentBlock = 0
	session.QuestionCount = 0
	session.CurrentDialogue = []storage.QA{}
	session.CumulativeSummaries = []string{}
	session.Result = nil
	session.InterviewID = ""
	session.LastActivity = time.Now()
}

func (h *Handler) getCurrentBlockTitle(blockNum int) string {
	if blockNum <= 0 || blockNum > len(h.config.Blocks) {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"
	}
	return h.config.Blocks[blockNum-1].Title
}

func (h *Handler) getStateDescription(state SessionState) string {
	switch state {
	case StateIdle:
		return "–û–∂–∏–¥–∞–Ω–∏–µ"
	case StateInterview:
		return "–ò–Ω—Ç–µ—Ä–≤—å—é"
	case StateWaitingAnswer:
		return "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"
	case StateCompleted:
		return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

func (h *Handler) isBlockComplete(question string) bool {
	lowerQuestion := strings.ToLower(question)
	return strings.Contains(lowerQuestion, "–∑–∞–≤–µ—Ä—à–∞–µ–º") ||
		strings.Contains(lowerQuestion, "–ø–µ—Ä–µ—Ö–æ–¥–∏–º") ||
		strings.Contains(lowerQuestion, "–±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω") ||
		strings.Contains(lowerQuestion, "—Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫")
}

func (h *Handler) getTotalAnswersCount(result *storage.InterviewResult) int {
	count := 0
	for _, block := range result.Blocks {
		count += len(block.QuestionsAndAnswers)
	}
	return count
}

package main

import (
	"fmt"
	"interview-bot-complete/internal/config"
	"interview-bot-complete/internal/extractor"
	"interview-bot-complete/internal/interviewer"
	"interview-bot-complete/internal/telegram"
	"log"
	"os"

	"github.com/joho/godotenv"
)

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ Interview Bot —Å Profile Extractor...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
	openaiKey := os.Getenv("OPENAI_API_KEY")
	if openaiKey == "" {
		log.Fatal("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	telegramToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if telegramToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é
	cfg, err := config.Load("config/interview.yaml")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
	fmt.Println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

	// –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
	interviewerService := interviewer.New(openaiKey)
	fmt.Println("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// Profile Extractor –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	extractorService, err := extractor.New(openaiKey)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Profile Extractor: %v", err)
		log.Println("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π")
		extractorService = nil
	} else {
		fmt.Println("‚úÖ Profile Extractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	// Telegram –±–æ—Ç
	bot := telegram.New(telegramToken)
	handler := telegram.NewHandler(bot, cfg, interviewerService, extractorService)
	fmt.Println("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	fmt.Println("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
	fmt.Printf("‚Ä¢ –ë–ª–æ–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é: %d\n", cfg.GetTotalBlocks())
	fmt.Printf("‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –±–ª–æ–∫: –¥–æ %d\n", cfg.GetQuestionsPerBlock()+cfg.GetMaxFollowupQuestions())

	if extractorService != nil {
		fmt.Println("‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π: –≤–∫–ª—é—á–µ–Ω üß†")
	} else {
		fmt.Println("‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π: –æ—Ç–∫–ª—é—á–µ–Ω ‚ö†Ô∏è")
	}

	fmt.Println("\nü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
	fmt.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	fmt.Println("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

	// –ó–∞–ø—É—Å–∫–∞–µ–º polling
	err = bot.StartPolling(handler.HandleUpdate)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: %v", err)
	}
}

package extractor

import (
	"encoding/json"
	"fmt"
	"interview-bot-complete/internal/api"
	"interview-bot-complete/internal/interview"
	"interview-bot-complete/internal/prompts"
	"interview-bot-complete/internal/schema"
	"interview-bot-complete/internal/storage"
	"interview-bot-complete/internal/validator"
	"io/ioutil"
	"log"
	"os"
	"time"
)

// Service –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
type Service struct {
	apiClient    *api.OpenAIClient
	schemaFields map[string]schema.SchemaField
}

// ProfileResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
type ProfileResult struct {
	ProfileJSON string                 `json:"profile_json"`
	Metadata    map[string]interface{} `json:"metadata"`
	Success     bool                   `json:"success"`
	Error       string                 `json:"error,omitempty"`
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
func New(openaiAPIKey string) (*Service, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
	client := api.NewOpenAIClient(openaiAPIKey)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –∏–∑ config/profile_schema.yaml
	yamlContent, err := ioutil.ReadFile("config/profile_schema.yaml")
	if err != nil {
		return nil, fmt.Errorf("error reading config/profile_schema.yaml: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º —Å—Ö–µ–º—É
	schemaFields, err := schema.ParseYAMLSchema(yamlContent)
	if err != nil {
		return nil, fmt.Errorf("error parsing schema: %w", err)
	}

	log.Printf("Profile Extractor: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ö–µ–º–∞ —Å %d –ø–æ–ª—è–º–∏", len(schemaFields))

	return &Service{
		apiClient:    client,
		schemaFields: schemaFields,
	}, nil
}

// ExtractProfile –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)
func (s *Service) ExtractProfile(interviewResult *storage.InterviewResult) (*ProfileResult, error) {
	log.Printf("–ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é: %s", interviewResult.InterviewID)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InterviewResult –≤ —Ñ–æ—Ä–º–∞—Ç Profile Extractor
	extractorInterview := s.convertToExtractorFormat(interviewResult)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
	userText := extractorInterview.ExtractContextualAnswers()
	log.Printf("–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(userText))

	// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ API - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
	log.Println("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)...")
	optimizedPrompt := prompts.GenerateOptimizedExtractionPrompt(s.schemaFields, userText)

	profileJSON, err := s.apiClient.ExtractProfile(optimizedPrompt)
	if err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v", err),
		}, err
	}

	// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	if err := validator.ValidateProfileJSON(profileJSON, s.schemaFields); err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	var formatted map[string]interface{}
	if err := json.Unmarshal([]byte(profileJSON), &formatted); err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err),
		}, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	extractorInterview = s.convertToExtractorFormat(interviewResult)
	metadata := extractorInterview.GetInterviewMetadata()

	// –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	formatted["_metadata"] = map[string]interface{}{
		"interview_id":    interviewResult.InterviewID,
		"creation_date":   time.Now().Format("2006-01-02 15:04:05"),
		"total_questions": metadata["total_questions"],
		"completion_rate": metadata["completion_rate"],
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON —Å—Ç—Ä–æ–∫—É
	finalJSON, err := json.MarshalIndent(formatted, "", "  ")
	if err != nil {
		return &ProfileResult{
			Success: false,
			Error:   fmt.Sprintf("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON: %v", err),
		}, err
	}

	log.Printf("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é: %s", interviewResult.InterviewID)

	return &ProfileResult{
		ProfileJSON: string(finalJSON),
		Metadata:    metadata,
		Success:     true,
	}, nil
}

// SaveProfile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–∞–π–ª
func (s *Service) SaveProfile(interviewID string, profileResult *ProfileResult) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("output", 0755); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ output: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å ID –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("output/profile_%s.json", interviewID)
	err := ioutil.WriteFile(fileName, []byte(profileResult.ProfileJSON), 0644)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %w", err)
	}

	log.Printf("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s", fileName)
	return fileName, nil
}

// convertToExtractorFormat –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç InterviewResult –≤ —Ñ–æ—Ä–º–∞—Ç Profile Extractor
func (s *Service) convertToExtractorFormat(result *storage.InterviewResult) *interview.Interview {
	var blocks []interview.Block

	for _, block := range result.Blocks {
		var qas []interview.QuestionAndAnswer

		for _, qa := range block.QuestionsAndAnswers {
			qas = append(qas, interview.QuestionAndAnswer{
				Question: qa.Question,
				Answer:   qa.Answer,
			})
		}

		blocks = append(blocks, interview.Block{
			BlockID:             block.BlockID,
			BlockName:           block.BlockName,
			QuestionsAndAnswers: qas,
		})
	}

	return &interview.Interview{
		InterviewID: result.InterviewID,
		Timestamp:   result.Timestamp,
		Blocks:      blocks,
	}
}

// GetProfileSummary —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
func (s *Service) GetProfileSummary(profileJSON string) (string, error) {
	var profile map[string]interface{}
	if err := json.Unmarshal([]byte(profileJSON), &profile); err != nil {
		return "", err
	}

	summary := "üìä **–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è:**\n\n"

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	if name, ok := profile["name"].(string); ok && name != "" {
		summary += fmt.Sprintf("üë§ **–ò–º—è:** %s\n", name)
	}

	if university, ok := profile["university"].(string); ok && university != "" {
		summary += fmt.Sprintf("üéì **–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:** %s\n", university)
	}

	if position, ok := profile["current_position"].(string); ok && position != "" {
		summary += fmt.Sprintf("üíº **–ü–æ–∑–∏—Ü–∏—è:** %s\n", position)
	}

	if hobbies, ok := profile["hobbies"].([]interface{}); ok && len(hobbies) > 0 {
		summary += "üéØ **–•–æ–±–±–∏:** "
		for i, hobby := range hobbies {
			if i > 0 && i < 3 {
				summary += ", "
			}
			if i >= 3 {
				summary += "..."
				break
			}
			summary += fmt.Sprintf("%v", hobby)
		}
		summary += "\n"
	}

	if skills, ok := profile["hard_skills"].([]interface{}); ok && len(skills) > 0 {
		summary += "üí™ **–ù–∞–≤—ã–∫–∏:** "
		for i, skill := range skills {
			if i > 0 && i < 3 {
				summary += ", "
			}
			if i >= 3 {
				summary += "..."
				break
			}
			summary += fmt.Sprintf("%v", skill)
		}
		summary += "\n"
	}

	summary += "\n_–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON —Ñ–∞–π–ª–µ._"

	return summary, nil
}
